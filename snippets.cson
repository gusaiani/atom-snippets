# Gustavo Saianiâ€™s Atom.io snippets
'*':
  '"""':
    prefix: '"""'
    body: '"""\n$1\n"""'

'.source.ruby':
  'binding.pry':
    prefix: 'bp'
    body: 'binding.pry'

'.source.js, .source.jsx, .source.ts, .source.js-semantic':
  '.':
    prefix: '.'
    body: 'this.'

  '(.':
    prefix: '(.'
    body: '(this.'

  andThen:
    prefix: 'at'
    body: """
    andThen(function() {
      $1
    });
    """

  'arrow function':
    prefix: 'af'
    body: '($1) => {$2}'

  className:
    prefix: 'cn'
    body: 'className="$1"'

  'console.log':
    prefix: 'log'
    body: 'console.log($1)'

  const:
    prefix: 'const'
    body: 'const { $1 } = $2'

  'Debugger':
    prefix: 'db'
    body: 'debugger'

  'export function':
    prefix: 'ef'
    body: """
    export function $1($2) {
    \t$3
    }
    """

  'export default':
    prefix: 'ed'
    body: """
    export default $1({
    \t$3
    });
    """

  f:
    prefix: 'f'
    body: 'function($1) {\n\t$2\n}'

  'inline-if':
    prefix: 'iif'
    body: 'if ($1) { $2; }'

  import:
    prefix: 'im'
    body: "import $1 from '$2';"

  "import React, {Component, PropTypes} from 'react'":
    prefix: 'ircp'
    body: "import React, {Component, PropTypes} from 'react'\n"

  let:
    prefix: 'let'
    body: 'let { $1 } = $2'

  map:
    prefix: 'map'
    body: 'map(($1) => {$2})'

  'new entry':
    prefix: 'n'
    body: "'$1': '$2',"

  'Object.assign({}, state)':
    prefix: 'oas'
    body: 'Object.assign({}, state, {$1})'

  porps:
    prefix: 'porps'
    body: 'this.props'

  props:
    prefix: 'props'
    body: 'this.props'

  render:
    prefix: 'render'
    body: """
    render() {
    \t$1
    }
    """

  state:
    prefix: 'state'
    body: 'this.state'

  test:
    prefix: 'test'
    body: "test('$1', function (assert) {\n\t$2\n});"

  'this.setState':
    prefix: 'setState'
    body: 'this.setState($1)'

  label:
    prefix: 'label'
    body: '<label$1>$2</label>'

  div:
    prefix: 'div'
    body: '<div$1>$2</div>'

  span:
    prefix: 'span'
    body: '<span$1>$2</span>'

  form:
    prefix: 'form'
    body: '<form$1>$2</form>'

  button:
    prefix: 'button'
    body: '<button$1>$2</button>'

  table:
    prefix: 'table'
    body: '<table$1>$2</table>'

  tr:
    prefix: 'tr'
    body: """
    <tr>
    \t$1
    </tr>
    """

  th:
    prefix: 'th'
    body: '<th>$1</th>'

  td:
    prefix: 'td'
    body: '<td>$1</td>'

  h1:
    prefix: 'h1'
    body: '<h1>$1</h1>'

  p:
    prefix: 'p'
    body: '<p>$1</p>'

'.source.json':
  'new entry':
    prefix: 'n'
    body: '"$1": "$2",'

'.source.php':
  "?":
    prefix: '?'
    body: '<? $1 ?>'

'.source.elixir':
  alter:
    prefix: 'alter'
    body: 'alter table $1 do \t\nend'

  assert:
    prefix: 'as'
    body: 'assert '

  '_changeset':
    prefix: '_ch'
    body: '_changeset'

  changeset:
    prefix: 'ch'
    body: 'changeset'

  def:
    prefix: 'd'
    body: 'def $1($2) do\n\t$3\nend'

  'def when':
    prefix: 'dw'
    body: 'def $1 when $2 do \n\t$3\nend'

  defmodule:
    prefix: 'defm'
    body: 'defmodule $1 do\n\t$2\nend'

  'defmodule via dm':
    prefix: 'dm'
    body: 'defmodule $1 do\n\t$2\nend'

  'Enum.any?':
    prefix: 'any?'
    body: 'Enum.any?'

  'Enum.at':
    prefix: 'at'
    body: 'Enum.at'

  'Enum.each':
    prefix: 'each'
    body: 'Enum.each($1)'

  'Enum.count':
    prefix: 'count'
    body: 'Enum.count($1)'

  'Enum.filter':
    prefix: 'filter'
    body: 'Enum.filter($1)'

  'Enum.find':
    prefix: 'find'
    body: 'Enum.find($1)'

  'Enum.join':
    prefix: 'join'
    body: 'Enum.join($1)'

  'Enum.map':
    prefix: 'map'
    body: 'Enum.map($1)'

  'Enum.member?':
    prefix: 'member?'
    body: 'Enum.member?($1)'

  'Enum.put':
    prefix: 'put'
    body: 'Enum.put($1)'

  'Enum.partition':
    prefix: 'partition'
    body: 'Enum.partition($1)'

  'Enum.reduce':
    prefix: 'reduce'
    body: 'Enum.reduce($1)'

  'Enum.reject':
    prefix: 'reject'
    body: 'Enum.reject($1)'

  'Enum.reverse':
    prefix: 'reverse'
    body: 'Enum.reverse($1)'

  'Enum.shuffle':
    prefix: 'shuffle'
    body: 'Enum.shuffle($1)'

  'Enum.sort':
    prefix: 'sort'
    body: 'Enum.sort($1)'

  'Enum.sum':
    prefix: 'sum'
    body: 'Enum.sum($1)'

  'Enum.uniq':
    prefix: 'uniq'
    body: 'Enum.uniq($1)'

  '## Examples':
    prefix: 'ex'
    body: '## Examples'

  'handle_in':
    prefix: 'hi'
    body: 'def handle_in($1) do\n\t$2\nend'

  'IEX.pry':
    prefix: 'iex'
    body: """
    require IEx
    IEx.pry

    """

  'inline def':
    prefix: 'id'
    body: 'def $1, do: $2'

  'inline defp':
    prefix: 'idp'
    body: 'defp $1, do: $2'

  'IO.Puts':
    prefix: 'ip'
    body: 'IO.puts '

  'IO.inspect':
    prefix: 'ii'
    body: 'IO.inspect '

  '__MODULE__':
    prefix: 'mod'
    body: '__MODULE__'

'handlebars':
    extends: 'html'
    profile: 'handlebars'
    filters: 'html'
